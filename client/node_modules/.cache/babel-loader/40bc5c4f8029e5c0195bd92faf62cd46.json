{"ast":null,"code":"var isNotEmpty=function isNotEmpty(value){var error=\"\",isValid=true;if(value===\"\"){error=\"Please provide a value\";isValid=false;}return{error:error,isValid:isValid};};var isValidCardNumber=function isValidCardNumber(cardNumber){var error=\"\",isValid=true;var re=/^\\d{16}$/;isValid=re.test(cardNumber);if(!isValid){error=\"Please check your card number\";}return{error:error,isValid:isValid};};var stripNonNumericCharacters=function stripNonNumericCharacters(str){return str.replace(/[^0-9]+/g,\"\");};var identity=function identity(value){return value;};var formatCardNumber=function formatCardNumber(cardNumber){if(!cardNumber.length)return\"\";var nonNumericCharactersRe=/[^0-9]/;var containsNonNumericCharacters=nonNumericCharactersRe.test(cardNumber);if(containsNonNumericCharacters)return cardNumber;if(cardNumber.length<5)return cardNumber;return\"\".concat(cardNumber.slice(0,4),\" \").concat(formatCardNumber(cardNumber.slice(4)));};var prefixCardExpiry=function prefixCardExpiry(expiry){if(expiry.length===1){if(expiry===\"0\"||expiry===\"1\"){return expiry;}else{return\"0\".concat(expiry);}}else{return expiry;}};var formatCardExpiry=function formatCardExpiry(cardExpiry){if(!cardExpiry.length)return\"\";var nonNumericCharactersRe=/[^0-9]/;var containsNonNumericCharacters=nonNumericCharactersRe.test(cardExpiry);if(containsNonNumericCharacters)return cardExpiry;var expiry=prefixCardExpiry(cardExpiry);if(expiry.length<3)return expiry;return\"\".concat(expiry.slice(0,2),\"/\").concat(formatCardNumber(expiry.slice(2)));};var isValidExpiryDate=function isValidExpiryDate(dateString){var re=/^\\d\\d\\d\\d$/g;var error=\"\",isValid=true;var isInTheValidFormat=re.test(dateString);if(!isInTheValidFormat){error=\"Your card's expiration not in the correct format\";isValid=false;return{error:error,isValid:isValid};}var month=parseInt(dateString.substring(0,2));var year=parseInt(dateString.substring(2));var now=new Date();var currentYear=now.getFullYear();var shortCurrentYear=parseInt(\"\".concat(currentYear).substring(2),10);var currentMonth=now.getMonth();var yearHasExpired=year<shortCurrentYear;var yearIsSameAsCurrentYear=year===shortCurrentYear;if(yearHasExpired){error=\"Invalid expiration date as the entered year is in the past\";isValid=false;return{error:error,isValid:isValid};}if(month>12){error=\"Invalid expiration date as value of the month field is more than 12\";return{error:error};}else{if(yearIsSameAsCurrentYear){var monthHasExpired=month<currentMonth;if(monthHasExpired){error=\"Invalid expiration date as the entered month is in the past\";isValid=false;return{error:error,isValid:isValid};}else{return{error:error,isValid:isValid};}}else{return{error:error,isValid:isValid};}}};var isValidCardCVV=function isValidCardCVV(CVV,cardIssuer){var error=\"\",isValid=true;if(cardIssuer===\"VISA\"){var re=/^\\d{3}$/;isValid=re.test(CVV);}if(cardIssuer===\"AMEX\"){var _re=/^\\d{4}$/;isValid=_re.test(CVV);}if(!isValid){error=\"Invalid CVV. Please try again\";}return{error:error,isValid:isValid};};var getCardIssuer=function getCardIssuer(cardNumber){var cardIssuer=\"UNKNOWN\";if(cardNumber.startsWith(\"4\")){cardIssuer=\"VISA\";}else if(cardNumber.startsWith(\"3\")){var re=/^(34|37)/;if(re.test(cardNumber)){cardIssuer=\"AMEX\";}}return cardIssuer;};var VALIDATORS={cardNumber:isValidCardNumber,cardExpiry:isValidExpiryDate,nameOnCard:isNotEmpty,cardCVV:isValidCardCVV};var DATA_SANITIZERS={cardNumber:stripNonNumericCharacters,cardExpiry:stripNonNumericCharacters};var DATA_FORMATTERS={cardNumber:formatCardNumber,cardExpiry:formatCardExpiry};var CARD_ISSUER_LOGOS={VISA:\"https://js.stripe.com/v3/fingerprinted/img/visa-d6c6e0a636f7373e06d5fb896ad49475.svg\",AMEX:\"https://js.stripe.com/v3/fingerprinted/img/amex-edf6011de255d8a4c22904795c9d8770.svg\"};export{DATA_FORMATTERS,DATA_SANITIZERS,VALIDATORS,CARD_ISSUER_LOGOS,identity,isNotEmpty,isValidCardCVV,isValidCardNumber,isValidExpiryDate,formatCardExpiry,formatCardNumber,stripNonNumericCharacters,getCardIssuer};","map":{"version":3,"sources":["D:/Project/client/src/components/type/payment/utils.js"],"names":["isNotEmpty","value","error","isValid","isValidCardNumber","cardNumber","re","test","stripNonNumericCharacters","str","replace","identity","formatCardNumber","length","nonNumericCharactersRe","containsNonNumericCharacters","slice","prefixCardExpiry","expiry","formatCardExpiry","cardExpiry","isValidExpiryDate","dateString","isInTheValidFormat","month","parseInt","substring","year","now","Date","currentYear","getFullYear","shortCurrentYear","currentMonth","getMonth","yearHasExpired","yearIsSameAsCurrentYear","monthHasExpired","isValidCardCVV","CVV","cardIssuer","getCardIssuer","startsWith","VALIDATORS","nameOnCard","cardCVV","DATA_SANITIZERS","DATA_FORMATTERS","CARD_ISSUER_LOGOS","VISA","AMEX"],"mappings":"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","sourcesContent":["const isNotEmpty = value => {\n  let error = \"\",\n    isValid = true;\n  if (value === \"\") {\n    error = \"Please provide a value\";\n    isValid = false;\n  }\n  return { error, isValid };\n};\n\nconst isValidCardNumber = cardNumber => {\n  let error = \"\",\n    isValid = true;\n  const re = /^\\d{16}$/;\n  isValid = re.test(cardNumber);\n  if (!isValid) {\n    error = \"Please check your card number\";\n  }\n\n  return { error, isValid };\n};\n\nconst stripNonNumericCharacters = str => {\n  return str.replace(/[^0-9]+/g, \"\");\n};\n\nconst identity = value => value;\n\nconst formatCardNumber = cardNumber => {\n  if (!cardNumber.length) return \"\";\n  const nonNumericCharactersRe = /[^0-9]/;\n  const containsNonNumericCharacters = nonNumericCharactersRe.test(cardNumber);\n  if (containsNonNumericCharacters) return cardNumber;\n\n  if (cardNumber.length < 5) return cardNumber;\n\n  return `${cardNumber.slice(0, 4)} ${formatCardNumber(cardNumber.slice(4))}`;\n};\n\nconst prefixCardExpiry = expiry => {\n  if (expiry.length === 1) {\n    if (expiry === \"0\" || expiry === \"1\") {\n      return expiry;\n    } else {\n      return `0${expiry}`;\n    }\n  } else {\n    return expiry;\n  }\n};\n\nconst formatCardExpiry = cardExpiry => {\n  if (!cardExpiry.length) return \"\";\n  const nonNumericCharactersRe = /[^0-9]/;\n  const containsNonNumericCharacters = nonNumericCharactersRe.test(cardExpiry);\n  if (containsNonNumericCharacters) return cardExpiry;\n\n  const expiry = prefixCardExpiry(cardExpiry);\n\n  if (expiry.length < 3) return expiry;\n\n  return `${expiry.slice(0, 2)}/${formatCardNumber(expiry.slice(2))}`;\n};\n\nconst isValidExpiryDate = dateString => {\n  const re = /^\\d\\d\\d\\d$/g;\n  let error = \"\",\n    isValid = true;\n  const isInTheValidFormat = re.test(dateString);\n  if (!isInTheValidFormat) {\n    error = \"Your card's expiration not in the correct format\";\n    isValid = false;\n    return { error, isValid };\n  }\n\n  const month = parseInt(dateString.substring(0, 2));\n  const year = parseInt(dateString.substring(2));\n\n  const now = new Date();\n  const currentYear = now.getFullYear();\n  const shortCurrentYear = parseInt(`${currentYear}`.substring(2), 10);\n  const currentMonth = now.getMonth();\n\n  const yearHasExpired = year < shortCurrentYear;\n  const yearIsSameAsCurrentYear = year === shortCurrentYear;\n  if (yearHasExpired) {\n    error = \"Invalid expiration date as the entered year is in the past\";\n    isValid = false;\n    return { error, isValid };\n  }\n  if (month > 12) {\n    error =\n      \"Invalid expiration date as value of the month field is more than 12\";\n    return { error };\n  } else {\n    if (yearIsSameAsCurrentYear) {\n      const monthHasExpired = month < currentMonth;\n      if (monthHasExpired) {\n        error = \"Invalid expiration date as the entered month is in the past\";\n        isValid = false;\n        return { error, isValid };\n      } else {\n        return { error, isValid };\n      }\n    } else {\n      return { error, isValid };\n    }\n  }\n};\n\nconst isValidCardCVV = (CVV, cardIssuer) => {\n  let error = \"\",\n    isValid = true;\n  if (cardIssuer === \"VISA\") {\n    let re = /^\\d{3}$/;\n    isValid = re.test(CVV);\n  }\n  if (cardIssuer === \"AMEX\") {\n    let re = /^\\d{4}$/;\n    isValid = re.test(CVV);\n  }\n  if (!isValid) {\n    error = \"Invalid CVV. Please try again\";\n  }\n\n  return { error, isValid };\n};\n\nconst getCardIssuer = cardNumber => {\n  let cardIssuer = \"UNKNOWN\";\n\n  if (cardNumber.startsWith(\"4\")) {\n    cardIssuer = \"VISA\";\n  } else if (cardNumber.startsWith(\"3\")) {\n    const re = /^(34|37)/;\n    if (re.test(cardNumber)) {\n      cardIssuer = \"AMEX\";\n    }\n  }\n\n  return cardIssuer;\n};\n\nconst VALIDATORS = {\n  cardNumber: isValidCardNumber,\n  cardExpiry: isValidExpiryDate,\n  nameOnCard: isNotEmpty,\n  cardCVV: isValidCardCVV\n};\n\nconst DATA_SANITIZERS = {\n  cardNumber: stripNonNumericCharacters,\n  cardExpiry: stripNonNumericCharacters\n};\n\nconst DATA_FORMATTERS = {\n  cardNumber: formatCardNumber,\n  cardExpiry: formatCardExpiry\n};\n\nconst CARD_ISSUER_LOGOS = {\n  VISA:\n    \"https://js.stripe.com/v3/fingerprinted/img/visa-d6c6e0a636f7373e06d5fb896ad49475.svg\",\n  AMEX:\n    \"https://js.stripe.com/v3/fingerprinted/img/amex-edf6011de255d8a4c22904795c9d8770.svg\"\n};\n\nexport {\n  DATA_FORMATTERS,\n  DATA_SANITIZERS,\n  VALIDATORS,\n  CARD_ISSUER_LOGOS,\n  identity,\n  isNotEmpty,\n  isValidCardCVV,\n  isValidCardNumber,\n  isValidExpiryDate,\n  formatCardExpiry,\n  formatCardNumber,\n  stripNonNumericCharacters,\n  getCardIssuer\n};\n"]},"metadata":{},"sourceType":"module"}